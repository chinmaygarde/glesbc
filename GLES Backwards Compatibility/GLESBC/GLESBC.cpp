//
//  GLESBC.m
//  GLESBC
//
//  Created by Chinmay Garde on 1/12/12.
//  Copyright (c) 2012 Carnegie Mellon University. All rights reserved.
//

#include "GLESBC.h"
#include "OpenGLES20Context.h"

static OpenGLES::OpenGLESContext *gl = NULL;

void setupGLES2BC() {
  gl = new OpenGLES::OpenGLES2::OpenGLES20Context();
}

void glActiveTextureBC(GLenum texture) { gl->glActiveTexture(texture); }; 
void glAlphaFuncBC(GLenum func, GLclampf ref) { gl->glAlphaFunc(func, ref); }; 
void glAlphaFuncxBC(GLenum func, GLclampx ref) { gl->glAlphaFuncx(func, ref); }; 
void glBindTextureBC(GLenum target, GLuint texture) { gl->glBindTexture(target, texture); }; 
void glBlendFuncBC(GLenum sfactor, GLenum dfactor) { gl->glBlendFunc(sfactor, dfactor); }; 
void glClearBC(GLbitfield mask) { gl->glClear(mask); }; 
void glClearColorBC(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) { gl->glClearColor(red, green, blue, alpha); }; 
void glClearColorxBC(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha) { gl->glClearColorx(red, green, blue, alpha); }; 
void glClearDepthfBC(GLclampf depth) { gl->glClearDepthf(depth); }; 
void glClearDepthxBC(GLclampx depth) { gl->glClearDepthx(depth); }; 
void glClearStencilBC(GLint s) { gl->glClearStencil(s); }; 
void glClientActiveTextureBC(GLenum texture) { gl->glClientActiveTexture(texture); }; 
void glColor4fBC(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { gl->glColor4f(red, green, blue, alpha); }; 
void glColor4xBC(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { gl->glColor4x(red, green, blue, alpha); }; 
void glColorMaskBC(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { gl->glColorMask(red, green, blue, alpha); }; 
void glColorPointerBC(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glColorPointer(size, type, stride, pointer); }; 
void glCompressedTexImage2DBC(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) { gl->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }; 
void glCompressedTexSubImage2DBC(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) { gl->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }; 
void glCopyTexImage2DBC(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { gl->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }; 
void glCopyTexSubImage2DBC(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { gl->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }; 
void glCullFaceBC(GLenum mode) { gl->glCullFace(mode); }; 
void glDeleteTexturesBC(GLsizei n, const GLuint *textures) { gl->glDeleteTextures(n, textures); }; 
void glDepthFuncBC(GLenum func) { gl->glDepthFunc(func); }; 
void glDepthMaskBC(GLboolean flag) { gl->glDepthMask(flag); }; 
void glDepthRangefBC(GLclampf zNear, GLclampf zFar) { gl->glDepthRangef(zNear, zFar); }; 
void glDepthRangexBC(GLclampx zNear, GLclampx zFar) { gl->glDepthRangex(zNear, zFar); }; 
void glDisableBC(GLenum cap) { gl->glDisable(cap); }; 
void glDisableClientStateBC(GLenum array) { gl->glDisableClientState(array); }; 
void glDrawArraysBC(GLenum mode, GLint first, GLsizei count) { gl->glDrawArrays(mode, first, count); }; 
void glDrawElementsBC(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) { gl->glDrawElements(mode, count, type, indices); }; 
void glEnableBC(GLenum cap) { gl->glEnable(cap); }; 
void glEnableClientStateBC(GLenum array) { gl->glEnableClientState(array); }; 
void glFinishBC(void) { gl->glFinish(); }; 
void glFlushBC(void) { gl->glFlush(); }; 
void glFogfBC(GLenum pname, GLfloat param) { gl->glFogf(pname, param); }; 
void glFogfvBC(GLenum pname, const GLfloat *params) { gl->glFogfv(pname, params); }; 
void glFogxBC(GLenum pname, GLfixed param) { gl->glFogx(pname, param); }; 
void glFogxvBC(GLenum pname, const GLfixed *params) { gl->glFogxv(pname, params); }; 
void glFrontFaceBC(GLenum mode) { gl->glFrontFace(mode); }; 
void glFrustumfBC(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) { gl->glFrustumf(left, right, bottom, top, zNear, zFar); }; 
void glFrustumxBC(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { gl->glFrustumx(left, right, bottom, top, zNear, zFar); }; 
void glGenTexturesBC(GLsizei n, GLuint *textures) { gl->glGenTextures(n, textures); }; 
GLenum glGetErrorBC(void) { return gl->glGetError(); }; 
void glGetIntegervBC(GLenum pname, GLint *params) { gl->glGetIntegerv(pname, params); }; 
const GLubyte * glGetStringBC(GLenum name) { return gl->glGetString(name); }; 
void glHintBC(GLenum target, GLenum mode) { gl->glHint(target, mode); }; 
void glLightModelfBC(GLenum pname, GLfloat param) { gl->glLightModelf(pname, param); }; 
void glLightModelfvBC(GLenum pname, const GLfloat *params) { gl->glLightModelfv(pname, params); }; 
void glLightModelxBC(GLenum pname, GLfixed param) { gl->glLightModelx(pname, param); }; 
void glLightModelxvBC(GLenum pname, const GLfixed *params) { gl->glLightModelxv(pname, params); }; 
void glLightfBC(GLenum light, GLenum pname, GLfloat param) { gl->glLightf(light, pname, param); }; 
void glLightfvBC(GLenum light, GLenum pname, const GLfloat *params) { gl->glLightfv(light, pname, params); }; 
void glLightxBC(GLenum light, GLenum pname, GLfixed param) { gl->glLightx(light, pname, param); }; 
void glLightxvBC(GLenum light, GLenum pname, const GLfixed *params) { gl->glLightxv(light, pname, params); }; 
void glLineWidthBC(GLfloat width) { gl->glLineWidth(width); }; 
void glLineWidthxBC(GLfixed width) { gl->glLineWidthx(width); }; 
void glLoadIdentityBC(void) { gl->glLoadIdentity(); }; 
void glLoadMatrixfBC(const GLfloat *m) { gl->glLoadMatrixf(m); }; 
void glLoadMatrixxBC(const GLfixed *m) { gl->glLoadMatrixx(m); }; 
void glLogicOpBC(GLenum opcode) { gl->glLogicOp(opcode); }; 
void glMaterialfBC(GLenum face, GLenum pname, GLfloat param) { gl->glMaterialf(face, pname, param); }; 
void glMaterialfvBC(GLenum face, GLenum pname, const GLfloat *params) { gl->glMaterialfv(face, pname, params); }; 
void glMaterialxBC(GLenum face, GLenum pname, GLfixed param) { gl->glMaterialx(face, pname, param); }; 
void glMaterialxvBC(GLenum face, GLenum pname, const GLfixed *params) { gl->glMaterialxv(face, pname, params); }; 
void glMatrixModeBC(GLenum mode) { gl->glMatrixMode(mode); }; 
void glMultMatrixfBC(const GLfloat *m) { gl->glMultMatrixf(m); }; 
void glMultMatrixxBC(const GLfixed *m) { gl->glMultMatrixx(m); }; 
void glMultiTexCoord4fBC(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { gl->glMultiTexCoord4f(target, s, t, r, q); }; 
void glMultiTexCoord4xBC(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { gl->glMultiTexCoord4x(target, s, t, r, q); }; 
void glNormal3fBC(GLfloat nx, GLfloat ny, GLfloat nz) { gl->glNormal3f(nx, ny, nz); }; 
void glNormal3xBC(GLfixed nx, GLfixed ny, GLfixed nz) { gl->glNormal3x(nx, ny, nz); }; 
void glNormalPointerBC(GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glNormalPointer(type, stride, pointer); }; 
void glOrthofBC(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar) { gl->glOrthof(left, right, bottom, top, zNear, zFar); }; 
void glOrthoxBC(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar) { gl->glOrthox(left, right, bottom, top, zNear, zFar); }; 
void glPixelStoreiBC(GLenum pname, GLint param) { gl->glPixelStorei(pname, param); }; 
void glPointSizeBC(GLfloat size) { gl->glPointSize(size); }; 
void glPointSizexBC(GLfixed size) { gl->glPointSizex(size); }; 
void glPolygonOffsetBC(GLfloat factor, GLfloat units) { gl->glPolygonOffset(factor, units); }; 
void glPolygonOffsetxBC(GLfixed factor, GLfixed units) { gl->glPolygonOffsetx(factor, units); }; 
void glPopMatrixBC(void) { gl->glPopMatrix(); }; 
void glPushMatrixBC(void) { gl->glPushMatrix(); }; 
void glReadPixelsBC(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) { gl->glReadPixels(x, y, width, height, format, type, pixels); }; 
void glRotatefBC(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { gl->glRotatef(angle, x, y, z); }; 
void glRotatexBC(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { gl->glRotatex(angle, x, y, z); }; 
void glSampleCoverageBC(GLclampf value, GLboolean invert) { gl->glSampleCoverage(value, invert); }; 
void glSampleCoveragexBC(GLclampx value, GLboolean invert) { gl->glSampleCoveragex(value, invert); }; 
void glScalefBC(GLfloat x, GLfloat y, GLfloat z) { gl->glScalef(x, y, z); }; 
void glScalexBC(GLfixed x, GLfixed y, GLfixed z) { gl->glScalex(x, y, z); }; 
void glScissorBC(GLint x, GLint y, GLsizei width, GLsizei height) { gl->glScissor(x, y, width, height); }; 
void glShadeModelBC(GLenum mode) { gl->glShadeModel(mode); }; 
void glStencilFuncBC(GLenum func, GLint ref, GLuint mask) { gl->glStencilFunc(func, ref, mask); }; 
void glStencilMaskBC(GLuint mask) { gl->glStencilMask(mask); }; 
void glStencilOpBC(GLenum fail, GLenum zfail, GLenum zpass) { gl->glStencilOp(fail, zfail, zpass); }; 
void glTexCoordPointerBC(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glTexCoordPointer(size, type, stride, pointer); }; 
void glTexEnvfBC(GLenum target, GLenum pname, GLfloat param) { gl->glTexEnvf(target, pname, param); }; 
void glTexEnvfvBC(GLenum target, GLenum pname, const GLfloat *params) { gl->glTexEnvfv(target, pname, params); }; 
void glTexEnvxBC(GLenum target, GLenum pname, GLfixed param) { gl->glTexEnvx(target, pname, param); }; 
void glTexEnvxvBC(GLenum target, GLenum pname, const GLfixed *params) { gl->glTexEnvxv(target, pname, params); }; 
void glTexImage2DBC(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) { gl->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }; 
void glTexParameterfBC(GLenum target, GLenum pname, GLfloat param) { gl->glTexParameterf(target, pname, param); }; 
void glTexParameterxBC(GLenum target, GLenum pname, GLfixed param) { gl->glTexParameterx(target, pname, param); }; 
void glTexSubImage2DBC(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) { gl->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }; 
void glTranslatefBC(GLfloat x, GLfloat y, GLfloat z) { gl->glTranslatef(x, y, z); }; 
void glTranslatexBC(GLfixed x, GLfixed y, GLfixed z) { gl->glTranslatex(x, y, z); }; 
void glVertexPointerBC(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glVertexPointer(size, type, stride, pointer); }; 
void glViewportBC(GLint x, GLint y, GLsizei width, GLsizei height) { gl->glViewport(x, y, width, height); }; 
void glBindBufferBC(GLenum target, GLuint buffer) { gl->glBindBuffer(target, buffer); }; 
void glBufferDataBC(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) { gl->glBufferData(target, size, data, usage); }; 
void glBufferSubDataBC(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) { gl->glBufferSubData(target, offset, size, data); }; 
void glClipPlanefBC(GLenum plane, const GLfloat *equation) { gl->glClipPlanef(plane, equation); }; 
void glClipPlanexBC(GLenum plane, const GLfixed *equation) { gl->glClipPlanex(plane, equation); }; 
void glColor4ubBC(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { gl->glColor4ub(red, green, blue, alpha); }; 
void glDeleteBuffersBC(GLsizei n, const GLuint *buffers) { gl->glDeleteBuffers(n, buffers); }; 
void glGenBuffersBC(GLsizei n, GLuint *buffers) { gl->glGenBuffers(n, buffers); }; 
void glGetClipPlanefBC(GLenum pname, GLfloat eqn[4]) { gl->glGetClipPlanef(pname, eqn); }; 
void glGetFloatvBC(GLenum pname, GLfloat *params) { gl->glGetFloatv(pname, params); }; 
void glGetLightfvBC(GLenum light, GLenum pname, GLfloat *params) { gl->glGetLightfv(light, pname, params); }; 
void glGetLightxvBC(GLenum light, GLenum pname, GLfixed *params) { gl->glGetLightxv(light, pname, params); }; 
void glGetMaterialfvBC(GLenum face, GLenum pname, GLfloat *params) { gl->glGetMaterialfv(face, pname, params); }; 
void glGetMaterialxvBC(GLenum face, GLenum pname, GLfixed *params) { gl->glGetMaterialxv(face, pname, params); }; 
void glGetTexEnvfvBC(GLenum env, GLenum pname, GLfloat *params) { gl->glGetTexEnvfv(env, pname, params); }; 
void glGetTexEnvivBC(GLenum env, GLenum pname, GLint *params) { gl->glGetTexEnviv(env, pname, params); }; 
void glGetTexEnvxvBC(GLenum env, GLenum pname, GLfixed *params) { gl->glGetTexEnvxv(env, pname, params); }; 
void glGetTexParameterfvBC(GLenum target, GLenum pname, GLfloat *params) { gl->glGetTexParameterfv(target, pname, params); }; 
void glGetTexParameterivBC(GLenum target, GLenum pname, GLint *params) { gl->glGetTexParameteriv(target, pname, params); }; 
void glGetTexParameterxvBC(GLenum target, GLenum pname, GLfixed *params) { gl->glGetTexParameterxv(target, pname, params); }; 
void glGetBooleanvBC(GLenum pname, GLboolean *params) { gl->glGetBooleanv(pname, params); }; 
void glGetFixedvBC(GLenum pname, GLfixed *params) { gl->glGetFixedv(pname, params); }; 
void glGetPointervBC(GLenum pname, void **params) { gl->glGetPointerv(pname, params); }; 
GLboolean glIsBufferBC(GLuint buffer) { return gl->glIsBuffer(buffer); }; 
GLboolean glIsEnabledBC(GLenum cap) { return gl->glIsEnabled(cap); }; 
GLboolean glIsTextureBC(GLuint texture) { return gl->glIsTexture(texture); }; 
void glPointParameterfBC(GLenum pname, GLfloat param) { gl->glPointParameterf(pname, param); }; 
void glPointParameterfvBC(GLenum pname, const GLfloat *params) { gl->glPointParameterfv(pname, params); }; 
void glPointParameterxBC(GLenum pname, GLfixed param) { gl->glPointParameterx(pname, param); }; 
void glPointParameterxvBC(GLenum pname, const GLfixed *params) { gl->glPointParameterxv(pname, params); }; 
void glTexEnviBC(GLenum target, GLenum pname, GLint param) { gl->glTexEnvi(target, pname, param); }; 
void glTexEnvivBC(GLenum target, GLenum pname, const GLint *params) { gl->glTexEnviv(target, pname, params); }; 
void glTexParameteriBC(GLenum target, GLenum pname, GLint param) { gl->glTexParameteri(target, pname, param); }; 
void glTexParameterivBC(GLenum target, GLenum pname, const GLint *params) { gl->glTexParameteriv(target, pname, params); }; 
void glCurrentPaletteMatrixOESBC(GLuint matrixpaletteindex) { gl->glCurrentPaletteMatrixOES(matrixpaletteindex); }; 
void glLoadPaletteFromModelViewMatrixOESBC(void) { gl->glLoadPaletteFromModelViewMatrixOES(); }; 
void glMatrixIndexPointerOESBC(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glMatrixIndexPointerOES(size, type, stride, pointer); }; 
void glWeightPointerOESBC(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glWeightPointerOES(size, type, stride, pointer); }; 
void glPointSizePointerOESBC(GLenum type, GLsizei stride, const GLvoid *pointer) { gl->glPointSizePointerOES(type, stride, pointer); }; 
void glDrawTexsOESBC(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { gl->glDrawTexsOES(x, y, z, width, height); }; 
void glDrawTexiOESBC(GLint x, GLint y, GLint z, GLint width, GLint height) { gl->glDrawTexiOES(x, y, z, width, height); }; 
void glDrawTexxOESBC(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { gl->glDrawTexxOES(x, y, z, width, height); }; 
void glDrawTexsvOESBC(const GLshort *coords) { gl->glDrawTexsvOES(coords); }; 
void glDrawTexivOESBC(const GLint *coords) { gl->glDrawTexivOES(coords); }; 
void glDrawTexxvOESBC(const GLfixed *coords) { gl->glDrawTexxvOES(coords); }; 
void glDrawTexfOESBC(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { gl->glDrawTexfOES(x, y, z, width, height); }; 
void glDrawTexfvOESBC(const GLfloat *coords) { gl->glDrawTexfvOES(coords); }; 
